<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
image_speed = .1;
grav = .6;
spd = 3;
jspd = 6;
hspd = 0;
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Round the y position
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up);

// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    
    if (jkey) {
        vspd = -jspd;
        audio_play_sound(sound0, 100, false);
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
    
    // Change to the jump sprite
    sprite_index = spr_player_jump_up;
}

// Moving right
if (rkey) {
    hspd = spd;
    
    // Left wall jump
    if (place_meeting(x-1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; !lkey) {
        vspd = -jspd;
        audio_play_sound(sound0, 100, false);
    }
}

// Moving left
if (lkey) {
    hspd = -spd;
    
    // Right wall jump
    if (place_meeting(x+1, y, obj_solid) &amp;&amp; !place_meeting(x, y+1, obj_solid) &amp;&amp; !rkey) {
        vspd = -jspd;
        audio_play_sound(sound0, 100, false);
    }
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
}

// Horizontal collisions
if (place_meeting(x+hspd, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd), y, obj_solid)) {
        x+= sign(hspd);
    }
    // Push the box
    if (place_meeting(x+sign(hspd), y, obj_box) &amp;&amp; hspd != 0) {
        box = instance_place(x+sign(hspd), y, obj_box);
        with (box) {
            if(!place_meeting(x+obj_player.hspd, y, obj_solid)) {
                x+=obj_player.hspd;
                obj_player.x+=sign(obj_player.hspd);
            }
            
            if (place_meeting(x+obj_player.hspd, y, obj_solid)) {
                while (!place_meeting(x+sign(obj_player.hspd), y, obj_solid)) {
                    x+= sign(obj_player.hspd);
                    obj_player.x+=sign(obj_player.hspd);
                }
            }
            obj_player.hspd = 0;
        }
    } else {
        hspd = 0;
    }
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;

// Control the sprites
if (x != xprevious) {
    sprite_index = spr_player_run;
    image_speed = .5;
    if (place_meeting(x, y+1, obj_solid) &amp;&amp; (round(image_index) == 6 || round(image_index) == 2) &amp;&amp; !audio_is_playing(sound1)) {
        audio_sound_pitch(sound1, .5+random(1.5));
        audio_play_sound(sound1, 99, false);
    }
    
    if (x &gt; xprevious) {
        image_xscale = 1;
    } else {
        image_xscale = -1;
    }
} else {
    sprite_index = spr_player;
    image_speed = .1;
}

if (!place_meeting(x, y+1, obj_solid)) { 
    if (y &lt;= yprevious) {
        sprite_index = spr_player_jump_up;
    } else {
        sprite_index = spr_player_jump_down;
    }
    
    if (place_meeting(x-1, y, obj_solid)) {
        sprite_index = spr_player_wallslide;
        image_xscale = 1;
    }
    
    if (place_meeting(x+1, y, obj_solid)) {
        sprite_index = spr_player_wallslide;
        image_xscale = -1;
    }
}

// Music control
if (!audio_is_playing(sound3)) {
    audio_play_sound(sound3, 104, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_game_reset">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart the game
audio_stop_sound(sound3);
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the next room

if (room_exists(other.roomwarp)) {
    audio_play_sound(sound2, 95, false);
    room_goto(other.roomwarp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the key and all the doors
audio_play_sound(sound5, 97, false);
with (other) instance_destroy();
with (obj_door) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change to the die object
audio_play_sound(sound4, 98, false);
instance_change( obj_player_die, true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stargem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the next room

if (room_next(room) != -1) {
    audio_play_sound(sound2, 95, false);
    room_goto(room_next(room));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
