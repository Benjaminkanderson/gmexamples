<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blue_stand_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>spr_enemy_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables for the enemy

// Set up some variables needed to control states
image_speed = .08;
dir = 'right';
mov = false;
slide_dir = 'right';
slide_spd = 4;

// Set up the state variables
state_tl = timeline_add();
state = 'wander';
//state_list[0] = 'wander';
//state_alarm[0] = -1;
//state_index = 0;
//alarm[0] = -1;
alarm[1] = 10;

// set up the movement varialbes
if (instance_exists(obj_player_parent)) {
    near = instance_nearest(x,y,obj_player_parent);
    haxis = near.x-x;
    vaxis = near.y-y;
}
magnitude = 1;
thresh = 16;

// Initialize the stats
scr_init_enemy_stats(3,1,1,1,2,3,2,64,-1);

// Create the particle emitter
scr_em_init();

// Set up the variables for running and standing sprites
scr_init_run_sprites(.2, spr_blue_run_right, spr_blue_run_down, spr_blue_run_up);
scr_init_stand_sprites(.08, spr_blue_stand_right, spr_blue_stand_down, spr_blue_stand_up);
scr_init_attack_sprites(0,spr_blue_attack_right,spr_blue_attack_down,spr_blue_attack_up);

// Set up the state scripts
scr_init_enemy_states(scr_enemy_wander_state, scr_enemy_chase_state, scr_enemy_attack_state, scr_enemy_slide_state, scr_enemy_stall_state,scr_enemy_unique_state);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wander state alarm

// This is for the wander state
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy State alarm

// DO NOT put code here
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the enemy states

// Make sure we know where the closest player is
if (instance_exists(obj_player_parent)) {
    near = instance_nearest(x,y,obj_player_parent);
}

// Wander
if(state == 'wander') {
    script_execute(wander_scr);
    
// Chase
} else if (state == 'chase') {
    script_execute(chase_scr);
    
// Attack
} else if (state == 'attack') {
    script_execute(attack_scr);
    
// Slide
} else if (state == 'slide') {
    script_execute(slide_scr);
    
// Stall
} else if (state == 'stall') {
    script_execute(stall_scr);
    
// Unique
} else if (state == 'unique') {
    script_execute(unique_scr);
}

// die
scr_enemy_die();

// State Alarm
//if (alarm[0] == 0) {
    //scr_enemy_end_state(state_list[state_index],state_alarm[state_index]);
    //slide_spd = 4;
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_damage">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take damage, create blood, slide

// Set the depth for the particle systems.
part_system_depth(global.ps,(y+8)*-1);

// Create the blood particle
part_emitter_region(global.ps,em,x-sprite_width/3,x+sprite_width/3,y-sprite_height/3,y+sprite_height/32,ps_shape_ellipse,ps_distr_gaussian);
part_emitter_burst(global.ps,em,global.pt_blood,6);

// Set the depth for the particle systems.
part_system_depth(global.ps,-10000);

// Reset the slide variables
hp-=1;

// Find the direction to slide
if (instance_exists(obj_player_parent)) {
    var near = instance_nearest(x,y,obj_player_parent);
    slide_dir = near.dir;
} else {
    slide_dir = 'right';
}

// Change into the slide object
state = 'slide';
slide_spd = 4;

// I should make a script for this... I'm not sure how though because I don't want to have a differenct script for every number of states
timeline_moment_add_script(state_tl, 12, scr_set_state_stall);
timeline_moment_add_script(state_tl, 24, scr_set_state_chase);
timeline_moment_add_script(state_tl, 25, scr_timeline_stop);
scr_timeline_start();

/*
state_index = 0;
state_list[0] = 'stall';
state_alarm[0] = 12;
state_list[1] = 'chase';
state_alarm[1] = -1;
*/

scr_dir_control(0,stand_right_image,stand_down_image,stand_up_image);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control depth and shadows

// Find the depth
scr_find_depth(8);

// Draw the outline
if (global.outline) {
    scr_draw_outline();
}

// draw the shadow
scr_draw_real_shadow(10, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
