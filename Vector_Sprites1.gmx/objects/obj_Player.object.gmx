<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity_direction = 270

//Variable Setup
accel = .5;         //This is how fast you pick up speed
fric = .5;          //This is the skidding...

xspeed = 0;         //This is how fast your character should actually move.
mxspeed = 5;        //This is the fastest your character can move.

jump_speed = 30;    //How high should the player be able to jump?
fall_speed = 0.9;   //This goes with gravity so a number between 0 and 1 is preferred
                    
move_contact_solid(270,-1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gravity
if place_free(x, y  + 2) //(2 * image_xscale))
  {
  var mx = x + xspeed * max(1, image_xscale);
  if place_free(mx, y + vspeed) &amp;&amp; place_free(mx, y)
    {
    x = mx;
    }
  gravity = fall_speed * image_xscale;
  }
else
{
gravity = 0;
move_contact_solid(270,-1);
}

//The Jump Key  
if keyboard_check_pressed(vk_shift)
  {
  if !place_free(x, y + (2 * max(1, image_xscale)))
    {
    vspeed = -(jump_speed * (image_xscale / 1.25))
    exit;
    }
  }

//Left Key
if keyboard_check(vk_left)
  {
  if !place_free(x, y + (2 * max(1, image_xscale)))
    {
    for(var i = -10; i &lt; 10; i++;)
      {
      if place_free(max(x + ((xspeed - accel) * max(1, image_xscale)), x - (mxspeed * max(1, image_xscale))), y - i)
        {
        if xspeed &gt; -mxspeed
            {
            xspeed -= accel
            }
        x += xspeed *  max(1, image_xscale);
        y -= i;
        exit;
        }
      }
    }
  else
    {
    if place_free(x + ((xspeed - accel) * max(1, image_xscale)), y + vspeed) &amp;&amp; place_free(x + ((xspeed - accel) * max(1, image_xscale)), y)
      {
      xspeed -= accel;
      }
    }
  }

//Right Key  
if keyboard_check(vk_right)
  {
  if !place_free(x, y +  (max(1, 2 * image_xscale)))
    {
    for(var i = -10; i &lt; 10; i++;)
      {
      if place_free(min(x + ((xspeed + accel)* max(1, image_xscale)), x + (mxspeed * max(1, image_xscale))), y - i)
        {
        if xspeed &lt; mxspeed 
            {
            xspeed += accel;
            }
        x += xspeed *  max(1, image_xscale);
        y -= i;
        exit;
        }
      }
    }
  else
    {
    if place_free(x + ((xspeed + accel) * max(1, image_xscale)), y + vspeed) &amp;&amp; place_free(x + ((xspeed + accel) * max(1, image_xscale)), y)
      {
      xspeed += accel;
      }
    }
  }

// Friction
if abs(xspeed)&gt;0 &amp;&amp; !place_free(x, y + 2) &amp;&amp; !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)
  {
  xspeed += fric * sign(-xspeed)
  for(var i= -10; i &lt; 10; i++;)
    {
    if place_free(x + (xspeed * max(1, image_xscale)), y - i)
      {
      x += xspeed * max(1, image_xscale);
      y -= i;
      exit;
      }
    }
  }


// If you're too slow then just stop
if abs(xspeed) &lt; accel
  {
  xspeed = 0;
  }
  
// If you're going to fast limit yourself
if abs(xspeed) &gt; mxspeed
  {
  if xspeed &lt; 0 xspeed = -mxspeed;
  if xspeed &gt; 0 xspeed = mxspeed;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//What happens when you hit an object parented to solid.
if vspeed &lt; 0
{
if other.bbox_top &lt; bbox_top
    {
    vspeed = 0;
    }
}
else
    {
    show_debug_message("hit the ground");
    vspeed = 0                   //Stop moving down  
    gravity = 0                  //No more gravity
    move_contact_solid(270,-1)   //Make sure there's no room between
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_Player_BMP, image_index, x, y, image_xscale, image_yscale, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,32</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
